/*
 * BSTree.cc
 *
 *  Created on: Jul 27, 2014
 *      Author: Silvestro di Luise
 *      Silvestro.Di.Luise@cern.ch
 *      
 *      
 *      
 *      Binary Search Tree Templated Class
 *      
 *      
 *      
 */

#include "BSTree.h"

/*
TreeClass::TreeClass() {
	// TODO Auto-generated constructor stub

}

TreeClass::~TreeClass() {
	// TODO Auto-generated destructor stub
}
*/

template<class T, class LessClass >
void TreeClass<T, LessClass>::p_print(Node *x){

	if(x!=0){
		p_print(x->left);
		cout<<x->key<<" ";
		p_print(x->right);
	}


}


template<class T, class LessClass >
bool TreeClass<T, LessClass>::p_search(Node *x, T usr_key){

	LessClass less;

	if(x==0) return false;

	if(  !less(x->key,usr_key)&&!less(usr_key,x->key) )
	{
		return true; //equal
	}

	if(less(usr_key,x->key)) p_search(x->left,usr_key);
	else p_search(x->right,usr_key);

}



template<class T, class LessClass >
void TreeClass<T, LessClass>::insert(T usr_key){

	LessClass less;
	Node *z= new Node;
	//assert(z);

	z->key=usr_key; z->left=0; z->right=0; z->parent=0;

    Node *y=0;
    Node *x=root;
    while( x!=0 ){
    	y=x;
    	if(less(z->key,y->key)) x=x->left;
    	//if((z->key<y->key)) x=x->left;
    	else x=x->right;
    }


    z->parent=y;
    if(y==0) root=z;
    else if(less(z->key,y->key)) y->left=z;
    //else if((z->key<y->key)) y->left=z;
    else y->right=z;
    
    Nentries++;
}



template<class T, class LessClass >
void TreeClass<T, LessClass>::insert(T usr_key, int data){

	//LessClass less;
	
	int order=0;
	    
    Node *y=0;
    Node *x=root;
    while( x!=0 ){
    	y=x;
    	if( (usr_key==y->key) ) {order++;}// return;}
    	if(fLess(usr_key,y->key)) x=x->left;
    	else x=x->right;
    }

    Node *z= new Node;
    //assert(z);
    z->key=usr_key; z->left=0; z->right=0; z->parent=0;
    z->data=data; z->state=1; z->order=order;

    z->parent=y;
    if(y==0) root=z;
    else if(fLess(z->key,y->key)) y->left=z;
    //else if((z->key<y->key)) y->left=z;
    else y->right=z;
    
    Nentries++;
}



template<class T, class LessClass >
T TreeClass<T, LessClass>::minimum(){

	assert(root);
	Node *x=root;

	while(x->left !=0 ) x=x->left;
	return x->key;


}

template<class T, class LessClass >
T TreeClass<T, LessClass>::maximum(){

	assert(root);
	Node *x=root;

	while(x->right !=0 ) x=x->right;
	return x->key;


}

template<class T, class LessClass >
T TreeClass<T, LessClass>::maximum_value(){

	assert(root);
	Node *x=root;

	while(x->right !=0 ) x=x->right;
	//cout<<"Max "<<x->key<<" "<<x->data<<" "<<x->order<<endl;
	return x->data;
}


template<class T> struct LessClass{
	bool operator()(const T & a, const T & b) const {return a<b;}
};





